/*
 * Copyright (c) 2022.
 * Juan Barraza
 */

/*
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.jcb.kafka.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SensorData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3599306642907840452L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorData\",\"namespace\":\"org.jcb.kafka.schema\",\"fields\":[{\"name\":\"sensorId\",\"type\":\"int\",\"doc\":\"The sensor identifier, it is unique in a building unit\"},{\"name\":\"temperature\",\"type\":\"double\",\"doc\":\"The temperature value expressed in Celsius\"},{\"name\":\"status\",\"type\":\"string\",\"doc\":\"The device's status\"},{\"name\":\"lastUpdate\",\"type\":\"long\",\"doc\":\"The time when the device was updated\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SensorData> ENCODER =
      new BinaryMessageEncoder<SensorData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SensorData> DECODER =
      new BinaryMessageDecoder<SensorData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SensorData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SensorData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SensorData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SensorData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SensorData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SensorData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SensorData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SensorData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The sensor identifier, it is unique in a building unit */
  private int sensorId;
  /** The temperature value expressed in Celsius */
  private double temperature;
  /** The device's status */
  private java.lang.CharSequence status;
  /** The time when the device was updated */
  private long lastUpdate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorData() {}

  /**
   * All-args constructor.
   * @param sensorId The sensor identifier, it is unique in a building unit
   * @param temperature The temperature value expressed in Celsius
   * @param status The device's status
   * @param lastUpdate The time when the device was updated
   */
  public SensorData(java.lang.Integer sensorId, java.lang.Double temperature, java.lang.CharSequence status, java.lang.Long lastUpdate) {
    this.sensorId = sensorId;
    this.temperature = temperature;
    this.status = status;
    this.lastUpdate = lastUpdate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensorId;
    case 1: return temperature;
    case 2: return status;
    case 3: return lastUpdate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensorId = (java.lang.Integer)value$; break;
    case 1: temperature = (java.lang.Double)value$; break;
    case 2: status = (java.lang.CharSequence)value$; break;
    case 3: lastUpdate = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sensorId' field.
   * @return The sensor identifier, it is unique in a building unit
   */
  public int getSensorId() {
    return sensorId;
  }


  /**
   * Sets the value of the 'sensorId' field.
   * The sensor identifier, it is unique in a building unit
   * @param value the value to set.
   */
  public void setSensorId(int value) {
    this.sensorId = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The temperature value expressed in Celsius
   */
  public double getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * The temperature value expressed in Celsius
   * @param value the value to set.
   */
  public void setTemperature(double value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The device's status
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * The device's status
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'lastUpdate' field.
   * @return The time when the device was updated
   */
  public long getLastUpdate() {
    return lastUpdate;
  }


  /**
   * Sets the value of the 'lastUpdate' field.
   * The time when the device was updated
   * @param value the value to set.
   */
  public void setLastUpdate(long value) {
    this.lastUpdate = value;
  }

  /**
   * Creates a new SensorData RecordBuilder.
   * @return A new SensorData RecordBuilder
   */
  public static SensorData.Builder newBuilder() {
    return new SensorData.Builder();
  }

  /**
   * Creates a new SensorData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorData RecordBuilder
   */
  public static SensorData.Builder newBuilder(SensorData.Builder other) {
    if (other == null) {
      return new SensorData.Builder();
    } else {
      return new SensorData.Builder(other);
    }
  }

  /**
   * Creates a new SensorData RecordBuilder by copying an existing SensorData instance.
   * @param other The existing instance to copy.
   * @return A new SensorData RecordBuilder
   */
  public static SensorData.Builder newBuilder(SensorData other) {
    if (other == null) {
      return new SensorData.Builder();
    } else {
      return new SensorData.Builder(other);
    }
  }

  /**
   * RecordBuilder for SensorData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorData>
    implements org.apache.avro.data.RecordBuilder<SensorData> {

    /** The sensor identifier, it is unique in a building unit */
    private int sensorId;
    /** The temperature value expressed in Celsius */
    private double temperature;
    /** The device's status */
    private java.lang.CharSequence status;
    /** The time when the device was updated */
    private long lastUpdate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(SensorData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[3].schema(), other.lastUpdate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing SensorData instance
     * @param other The existing instance to copy.
     */
    private Builder(SensorData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[3].schema(), other.lastUpdate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'sensorId' field.
      * The sensor identifier, it is unique in a building unit
      * @return The value.
      */
    public int getSensorId() {
      return sensorId;
    }


    /**
      * Sets the value of the 'sensorId' field.
      * The sensor identifier, it is unique in a building unit
      * @param value The value of 'sensorId'.
      * @return This builder.
      */
    public SensorData.Builder setSensorId(int value) {
      validate(fields()[0], value);
      this.sensorId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sensorId' field has been set.
      * The sensor identifier, it is unique in a building unit
      * @return True if the 'sensorId' field has been set, false otherwise.
      */
    public boolean hasSensorId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sensorId' field.
      * The sensor identifier, it is unique in a building unit
      * @return This builder.
      */
    public SensorData.Builder clearSensorId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * The temperature value expressed in Celsius
      * @return The value.
      */
    public double getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * The temperature value expressed in Celsius
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public SensorData.Builder setTemperature(double value) {
      validate(fields()[1], value);
      this.temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * The temperature value expressed in Celsius
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temperature' field.
      * The temperature value expressed in Celsius
      * @return This builder.
      */
    public SensorData.Builder clearTemperature() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * The device's status
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * The device's status
      * @param value The value of 'status'.
      * @return This builder.
      */
    public SensorData.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * The device's status
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * The device's status
      * @return This builder.
      */
    public SensorData.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdate' field.
      * The time when the device was updated
      * @return The value.
      */
    public long getLastUpdate() {
      return lastUpdate;
    }


    /**
      * Sets the value of the 'lastUpdate' field.
      * The time when the device was updated
      * @param value The value of 'lastUpdate'.
      * @return This builder.
      */
    public SensorData.Builder setLastUpdate(long value) {
      validate(fields()[3], value);
      this.lastUpdate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdate' field has been set.
      * The time when the device was updated
      * @return True if the 'lastUpdate' field has been set, false otherwise.
      */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastUpdate' field.
      * The time when the device was updated
      * @return This builder.
      */
    public SensorData.Builder clearLastUpdate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SensorData build() {
      try {
        SensorData record = new SensorData();
        record.sensorId = fieldSetFlags()[0] ? this.sensorId : (java.lang.Integer) defaultValue(fields()[0]);
        record.temperature = fieldSetFlags()[1] ? this.temperature : (java.lang.Double) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.lastUpdate = fieldSetFlags()[3] ? this.lastUpdate : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SensorData>
    WRITER$ = (org.apache.avro.io.DatumWriter<SensorData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SensorData>
    READER$ = (org.apache.avro.io.DatumReader<SensorData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.sensorId);

    out.writeDouble(this.temperature);

    out.writeString(this.status);

    out.writeLong(this.lastUpdate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sensorId = in.readInt();

      this.temperature = in.readDouble();

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      this.lastUpdate = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sensorId = in.readInt();
          break;

        case 1:
          this.temperature = in.readDouble();
          break;

        case 2:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        case 3:
          this.lastUpdate = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










